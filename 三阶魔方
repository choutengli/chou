# -*- coding: utf-8 -*-
r = 'r'
g = 'g'
b = 'b'
y = 'y'
w = 'w'
o = 'o'

'''
       0   1
       2   3
       ------
16 17 |4   5 |8   9 |12 13
18 19 |6   7 |10 11 |14 15
       ------
       20 21
       22 23
'''
# let cube[22] = r, cube[15] = w, cube[18] = b
std_cube = [o, o, o, o,
            y, y, y, y,
            g, g, g, g,
            w, w, w, w,
            b, b, b, b,
            r, r, r, r]

init_cube = [g, y, o, g,
             b, o, w, r,
             y, r, b, y,
             g, w, b, w,
             o, w, b, g,
             r, y, r, o]

def F(c):
    c = c[:]
    c[4], c[5], c[7], c[6] = c[6], c[4], c[5], c[7]
    c[2], c[3], c[8], c[10], c[21], c[20], c[19], c[17] = \
          c[19], c[17], c[2], c[3], c[8], c[10], c[21], c[20]
    return c

def B(c):
    c = c[:]
    c[6], c[4], c[5], c[7] = c[4], c[5], c[7], c[6]
    c[19], c[17], c[2], c[3], c[8], c[10], c[21], c[20] = \
          c[2], c[3], c[8], c[10], c[21], c[20], c[19], c[17]
    return c

def U(c):
    c = c[:]
    c[0], c[1], c[3], c[2] = c[2], c[0], c[1], c[3]
    c[4], c[5], c[8], c[9], c[12], c[13], c[16], c[17] = \
          c[8], c[9], c[12], c[13], c[16], c[17], c[4], c[5]
    return c

def D(c):
    c = c[:]
    c[2], c[0], c[1], c[3] = c[0], c[1], c[3], c[2]
    c[8], c[9], c[12], c[13], c[16], c[17], c[4], c[5] = \
          c[4], c[5], c[8], c[9], c[12], c[13], c[16], c[17]
    return c
    
def R(c):
    c = c[:]
    c[8], c[9], c[11], c[10] = c[10], c[8], c[9], c[11]
    c[3], c[1], c[12], c[14], c[23], c[21], c[7], c[5] = \
          c[7], c[5], c[3], c[1], c[12], c[14], c[23], c[21]
    return c

def L(c):
    c = c[:]
    c[10], c[8], c[9], c[11] = c[8], c[9], c[11], c[10]
    c[7], c[5], c[3], c[1], c[12], c[14], c[23], c[21] = \
          c[3], c[1], c[12], c[14], c[23], c[21], c[7], c[5]
    return c

cube_str = "".join(init_cube)
step = [{cube_str}]
all_state = {cube_str: ""}

found = False
while step[-1] != []:
    step.append(set())
    for c in step[-2]:
        for o in F, B, U, D, R, L:
            next_cube = o(list(c))
            next_cube_str = "".join(next_cube)
            if next_cube_str not in all_state:
                step[-1].add(next_cube_str)
                all_state[next_cube_str] = all_state[c] + str(o)[10]
                if next_cube == std_cube:
                    print(list(all_state[next_cube_str]))
                    print(len(step) - 1)
                    found = True
                    break
        if found:
            break
    if found:
        break
